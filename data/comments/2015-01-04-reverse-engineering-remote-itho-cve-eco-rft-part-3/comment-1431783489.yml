id: 17
replyTo: 0
name: Klusjesman
email: CF8A52B00AAAFF5039DFBB43F5D09462
body: "Hi Rogier,\n\nI don't know if you are still working on reverse engineering the RF messages?\n\nTwo days ago I started reverse engineering the RF messages myself. I am a software engineer (PC) and played with microcontrollers a few years ago (control stepper motor and some leds only). I have knowledge of reverse engineering in the PC field, but not on the electrical level.\n\nThe reason I started working on this is because Itho doesn't have any way to control the ventilation based on humidity. Ofcourse there are easy workaround solutions by using controlling the perilex or accessing the RF remote buttons but I don't like those solutions. Also it will be a fun project for me because I am new into this field.\n\nI shortly investigated the possibility of extracting the firmware out of the AtMega. Probably the microcontroller is protected so I skipped this possibility.\n\nSo last week I ordered a crappy logic analyser on ebay. It is giving me some noise in the analyzer software from time to time. But it was only 23 euro's including shipment cost.\n\nI almost have a clear picture of the whole messages which are being transferred. Data fields inside the messages consists of:\n- info about selected modespeed\n- info about previous selected mode\n- 6 fields which contain numbers from fixed sequences. One sequence is influenced by the selected mode.\n\nI've made a small .net program which I use to predict how the next message will look like. It works nicely and matches the results from the analyser.\n\nOne of the 6 fields with sequence data is not completely clear to me. It depends on the selected mode but even after 1000 messages I cannot find a logic in it. My guess is there is no logic in this one and it is used to make reverse engineering more difficult. I know how the field changes based on the selected mode. In the end the number in this field is even or odd. Maybe this is the only requirement on this field (the explanation in the paragraph below supports this). I can only find out by testing with a microcontroller. (I still have to order some parts). \n\nI don't think there is an unique id for each remote. The longest sequence of bytes used by Itho is 256 bytes long. In combination with all other sequences which are running across the different messages you will get 256 different messages. Initialisation of a new remote control by pressing two buttons for one second is probably needed so the base unit (CVE) knows which message (based on sequence) is expected next. This is just my guess. Your story about the CVE which started to work after 300 messages fits my findings. I guess there were no 300 messages transferred but only 256! The same message is repeated after 256 messages.\n\nThings I have to do:\n- investigate init messagetransfer\n- do some more analysing on one of the 6 sequence fields\n- order some RF transmitter to test (ATMega and a programmerdebugger was already ordered and is expected next week)\n- write C code for the ATMega and test\n\nWhen I am 100% certain (by testing) about all my findings then I will put them in a document and post them somewhere on a domotica forum.\n\nAfter two CR2032 batteries which were drained empty after a few hours of analyzing I concluded the remote control stays active when there is a lot of activity on the buttons. Don't know if this is true. Maybe the logic analyzer itself is playing a role in this. Now I am just removing the battery when I am not analyzing.\n\nIf you are interested in the .net application I made then I can send it to you. The source will reveal how the sequences are calculated for the messages and how the next message can be predicted. \n\n\nKind regards,\nPatrick"
date: 2015-05-16T15:38:09.0000000+02:00
